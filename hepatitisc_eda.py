# -*- coding: utf-8 -*-
"""HepatitisC_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_NdreqUpiYrHhP-FLv4V1GM2T9c2PPEF
"""

!conda install -c conda-forge rdkit -y # install RDKit using conda-forge channel
!conda install -c conda-forge boost -y # install Boost using conda-forge channel
import sys
sys.path.append('/usr/local/lib/python3.7/site-packages/') # append the RDKit installation path to sys.path

import pandas as pd

df = pd.read_csv('hepatitis_c_bioactivity_data_preprocessed.csv')
df.head(5)

!pip install -q condacolab
import condacolab
condacolab.install()

# Install RDKit
!mamba install -c conda-forge rdkit

"""## Lipinski Descriptors

Lipinski's Rule of Five is a set of criteria used to evaluate drug-likeness, predicting whether a chemical compound is likely to be an orally active drug in humans. These rules, or descriptors, include:
* 1. Molecular weight (MW) ≤ 500 Da
* 2. Octanol-water partition coefficient (LogP) ≤ 5 (indicating hydrophobicity)
* 3. Hydrogen bond donors (HBD) ≤ 5
* 4. Hydrogen bond acceptors (HBA) ≤ 10

Compounds that adhere to these rules tend to have better absorption and permeation properties.
"""

import numpy as np
from rdkit import Chem
from rdkit.Chem import Descriptors, Lipinski

# Inspired by: https://codeocean.com/explore/capsules?query=tag:data-curation

def lipinski(smiles, verbose=False):

    moldata= []
    for elem in smiles:
        mol=Chem.MolFromSmiles(elem)
        moldata.append(mol)

    baseData= np.arange(1,1)
    i=0
    for mol in moldata:

        desc_MolWt = Descriptors.MolWt(mol)
        desc_MolLogP = Descriptors.MolLogP(mol)
        desc_NumHDonors = Lipinski.NumHDonors(mol)
        desc_NumHAcceptors = Lipinski.NumHAcceptors(mol)

        row = np.array([desc_MolWt,
                        desc_MolLogP,
                        desc_NumHDonors,
                        desc_NumHAcceptors])

        if(i==0):
            baseData=row
        else:
            baseData=np.vstack([baseData, row])
        i=i+1

    columnNames=["MW","LogP","NumHDonors","NumHAcceptors"]
    descriptors = pd.DataFrame(data=baseData,columns=columnNames)

    return descriptors

df_lipinski = lipinski(df.canonical_smiles)

df_lipinski.head(5)

df.head(5)

df_combined = df.join(df_lipinski)
df_combined.head(5)

"""## Converting IC50 to pIC50
The function pIC50 from https://github.com/chaninlab/estrogen-receptor-alpha-qsar/blob/master/02_ER_alpha_RO5.ipynb takes a df as input and uses the values from the `standard_value` column to convert from nM to M by multiplying by the value 10<sup>-9<sup>.

It also takes the molar value and applies -log10, and replaces the standard value column with a pIC50 column.
"""

# https://github.com/chaninlab/estrogen-receptor-alpha-qsar/blob/master/02_ER_alpha_RO5.ipynb

import numpy as np

def pIC50(input):
    pIC50 = []

    for i in input['standard_value_norm']:
        molar = i*(10**-9) # Converts nM to M
        pIC50.append(-np.log10(molar))

    input['pIC50'] = pIC50
    x = input.drop('standard_value_norm', axis=1)

    return x

df_combined.standard_value.describe()

"""We will normalize the values in standard value column."""

def norm_value(input):
    norm = []

    for i in input['standard_value']:
        if i > 100000000:
          i = 100000000
        norm.append(i)

    input['standard_value_norm'] = norm
    input = input.drop('standard_value', axis=1)
    return input

df_norm = norm_value(df_combined)
df_norm.head(5)

df_norm.standard_value_norm.describe()

df = pIC50(df_norm)
df.head(5)

df.describe()

"""## Removing 'Intermediate' Bioactivity Class"""

df_class = df[df.bioactivity_class != 'intermediate']
df_class.bioactivity_class.unique()

"""## Chemical Space Analysis: Lipinski Descriptors"""

import seaborn as sns
sns.set(style='ticks')
import matplotlib.pyplot as plt

"""### Frequency Plot of Bioactivity classes"""

plt.figure()

sns.countplot(x='bioactivity_class', data=df_class, edgecolor='black')

plt.xlabel('Bioactivity class', fontweight='bold')
plt.ylabel('Frequency', fontweight='bold')

"""### Scatter plot MW vs logP"""

plt.figure()

sns.scatterplot(x='MW', y='LogP', data=df_class, hue='bioactivity_class', size='pIC50', edgecolor='black')

plt.xlabel('MW', fontweight='bold')
plt.ylabel('LogP', fontweight='bold')
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0)
plt.savefig('plot_MW_vs_LogP.pdf')

"""For the most part, the two bioactivity classes span the same chemical spaces as evident in the plot.

### Box Plots
"""

plt.figure()

sns.boxplot(x = 'bioactivity_class', y = 'pIC50', data = df_class)

plt.xlabel('Bioactivity class', fontweight='bold')
plt.ylabel('pIC50 value', fontweight='bold')

"""## Statistical Analysis: Mann-Whitney U Test

The Mann-Whitney U Test is a non-parametric statistical test used to compare two independent groups to determine if their distributions differ.

- **Purpose**:
  - To assess whether there is a statistically significant difference between the distributions of two independent samples.
  
- **Null Hypothesis (H<sub>0</sub>)**:
  - The distributions of both groups are equal.

- **Alternative Hypothesis (H<sub>1</sub>)**:
  - The distributions of the two groups are different (one group tends to have higher or lower values).

- **Assumptions**:
  - The data should be ordinal, interval, or ratio scale.
  - Observations must be independent.

- **Test Statistic**:
  - The U statistic is calculated based on the ranks of the data. A smaller U value indicates a more significant difference between the groups.

- **Interpretation**:
  - A low p-value (typically < 0.05) indicates that the null hypothesis can be rejected, suggesting that the two groups have significantly different distributions.

Code source: https://machinelearningmastery.com/nonparametric-statistical-significance-tests-in-python/
"""

def mannwhitney(descriptor, verbose=False):
  # https://machinelearningmastery.com/nonparametric-statistical-significance-tests-in-python/
  from numpy.random import seed
  from numpy.random import randn
  from scipy.stats import mannwhitneyu

# seed the random number generator
  seed(1)

# actives and inactives
  selection = [descriptor, 'bioactivity_class']
  df = df_class[selection]
  active = df[df.bioactivity_class == 'active']
  active = active[descriptor]

  selection = [descriptor, 'bioactivity_class']
  df = df_class[selection]
  inactive = df[df.bioactivity_class == 'inactive']
  inactive = inactive[descriptor]

# compare samples
  stat, p = mannwhitneyu(active, inactive)
  #print('Statistics=%.3f, p=%.3f' % (stat, p))

# interpret
  alpha = 0.05
  if p > alpha:
    interpretation = 'Same distribution (fail to reject H0)'
  else:
    interpretation = 'Different distribution (reject H0)'

  results = pd.DataFrame({'Descriptor':descriptor,
                          'Statistics':stat,
                          'p':p,
                          'alpha':alpha,
                          'Interpretation':interpretation}, index=[0])
  filename = 'mannwhitneyu_' + descriptor + '.csv'
  results.to_csv(filename)

  return results

mannwhitney('pIC50')

"""### Molecular Weight"""

plt.figure()

sns.boxplot(x = 'bioactivity_class', y = 'MW', data = df_class)

plt.xlabel('Bioactivity class', fontweight='bold')
plt.ylabel('MW', fontweight='bold')

plt.savefig('plot_MW.pdf')

mannwhitney('MW')

"""### LogP"""

plt.figure()

sns.boxplot(x = 'bioactivity_class', y = 'LogP', data = df_class)

plt.xlabel('Bioactivity class', fontweight='bold')
plt.ylabel('LogP', fontweight='bold')

mannwhitney('LogP')

"""### NumHDonors"""

plt.figure()

sns.boxplot(x = 'bioactivity_class', y = 'NumHDonors', data = df_class)

plt.xlabel('Bioactivity class', fontweight='bold')
plt.ylabel('NumHDonors', fontweight='bold')

mannwhitney('NumHDonors')

"""### NumHAcceptors"""

plt.figure()

sns.boxplot(x = 'bioactivity_class', y = 'NumHAcceptors', data = df_class)

plt.xlabel('Bioactivity class', fontweight='bold')
plt.ylabel('NumHAcceptors', fontweight='bold')

mannwhitney('NumHAcceptors')

"""### Interpretation of Statistical Results
*Note:* Threshold values were established to categorize compounds as actives or inactives: compounds with an IC50 value of less than 1,000 nM were classified as actives, while those with an IC50 value greater than 10,000 nM were designated as inactives. Correspondingly, this classification aligns with pIC50 values, where pIC50 values exceeding 6 indicate actives and pIC50 values below 5 indicate inactives.<br><br>

##### Box Plots
**PIC50** A statistically significant difference was observed between the active and inactive compounds.

**Lipinski Descriptors** Among the four Lipinski descriptors examined, molecular weight (MW), logP, and the number of hydrogen bond acceptors (NumHAcceptors) exhibited significant statistical differences between the active and inactive groups. In contrast, the number of hydrogen bond donors (NumHDonors) did not demonstrate a statistically significant difference between the two groups.

### Exporting EDA Results
"""

! zip -r results.zip . -i *.csv *.pdf